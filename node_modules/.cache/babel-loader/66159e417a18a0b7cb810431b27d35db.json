{"ast":null,"code":"function handleVueDestruction(vue) {\n  var event = vue.$options.destroyEvent || defaultEvent();\n  document.addEventListener(event, function teardown() {\n    vue.$destroy();\n    document.removeEventListener(event, teardown);\n  });\n}\n\nvar Mixin = {\n  beforeMount: function beforeMount() {\n    // If this is the root component, we want to cache the original element contents to replace later\n    // We don't care about sub-components, just the root\n    if (this === this.$root && this.$el) {\n      handleVueDestruction(this); // cache original element\n\n      this.$cachedHTML = this.$el.outerHTML; // register root hook to restore original element on destroy\n\n      this.$once('hook:destroyed', function () {\n        if (this.$el.parentNode) this.$el.outerHTML = this.$cachedHTML;\n      });\n    }\n  }\n};\n\nfunction plugin(Vue, options) {\n  // Install a global mixin\n  Vue.mixin(Mixin);\n}\n\nfunction defaultEvent() {\n  if (typeof Turbo !== 'undefined') {\n    return 'turbo:visit';\n  }\n\n  return 'turbolinks:visit';\n}\n\nexport { Mixin as turbolinksAdapterMixin };\nexport default plugin;","map":null,"metadata":{},"sourceType":"module"}